#!/usr/bin/python3
import hashlib
import os
import requests
from Crypto.PublicKey import RSA
import base64

url = "https://drive.google.com/uc?export=download&id=11Uz-NDdmzlaRasOa4AtVvT0-JCtbHyzY"
testing = False


def alive():
    if testing:
        with open(os.path.dirname(__file__) + '/../public-files/music-is-frequency.zip', 'rb') as f:
            content = f.read()
    else:
        content = requests.get(url).content
    computedHash = hashlib.md5(content).hexdigest()
    if computedHash != "92e9995a2817fa4019eb1ca784a1eb13":
        return False
    return True


def exploitable():
    "TODO add decompression function depending on the used format"
    init_text = open(os.path.dirname(os.path.abspath(__file__)) + '/../src/privatekey.bin', "rb").read().decode()
    notes = ['fa','sol','la','fa','fa','sol','la','fa','la','si','do','la','si','do','do','re','do','si','la','fa','do','re','do','si','la','fa','fa','do1','fa','fa','do1','fa']
    frequency = {'do1':262,'fa':349,'sol':392,'la':440,'si':466,'do':523,'re':587}
    association_dec = [frequency[i] for i in notes]
    association_binary_str = "".join(['{0:016b}'.format(i) for i in association_dec])

    rsa_key = RSA.importKey(''.join(chr(ord(j) ^ ord(association_binary_str[i % len(association_binary_str)])) for i,j in enumerate(init_text)))
    if "INSA" in rsa_key.decrypt(base64.b64decode(open(os.path.dirname(os.path.abspath(__file__)) + '/../src/flag.enc', "rb").read())).decode():
        return True
    return False


if __name__ == "__main__":
    if alive() and exploitable():
        exit(0)
    exit(1)
