#!/usr/bin/env python3

import sys
import socket
import hashlib
from pathlib import Path
from argparse import ArgumentParser
from ruamel.yaml import safe_load
from mt19937predictor import MT19937Predictor

def exploitable(host, port):
    print("exploit running...")
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_address = (host, port)
    sock.connect(server_address)
    predictor = MT19937Predictor()
    try:
        sock.recv(len(b'Hello and welcome to "Will you get your degree" challenge !  \n'))#welcome message
        random_num = []
        for i in range(625):
            print("picking magic number ({}/625)".format(i))
            sock.recv(len(b'To be sure we are fair, here is the commitment of our future jackpot 91f5cce0b6ec83650433aec51b3cb44d\n'))#commit
            sock.recv(len(b'Pick your magic number between 0 and 2**10 : \n'))#prompt
            sock.sendall(b'a\n')
            sock.recv(len(b'Please enter an integer\n'))#error int
            predictor.setrandbits(int(sock.recv(len(b'Commitment values : 0444 + 1692142405\n'))[27:37].decode()),32)
            sock.recv(len(b'You have 1000 credits remaining\n'))#remaining

    finally:
        for j in range(90):
            print("picking more magic number ({}/90)".format(j))
            blind = predictor.getrandbits(32)
            md5hash = sock.recv(len(b'To be sure we are fair, here is the commitment of our future jackpot 91f5cce0b6ec83650433aec51b3cb44d\n'))[-33:-1]
            sock.recv(len(b'Pick your magic number between 0 and 2**10 : \n'))
            for i in range(2**10):
                if hashlib.md5(str(i+blind).encode()).hexdigest() == md5hash.decode():
                    sock.sendall(str(i).encode())
                    break
            sock.recv(len(b'"Good guess !\n"'))
            sock.recv(len(b'Commitment values : 0444 + 1692142405\n'))
            sock.recv(len(b'You have %d credits remaining\n'%(1100+j*100)))
        blind = predictor.getrandbits(32)
        md5hash = sock.recv(len(b'To be sure we are fair, here is the commitment of our future jackpot 91f5cce0b6ec83650433aec51b3cb44d\n'))[-33:-1]
        sock.recv(len(b'Pick your magic number between 0 and 2**10 : \n'))
        for i in range(2**10):
            print("picking final numbers ({}/1024)".format(i))
            if hashlib.md5(str(i+blind).encode()).hexdigest() == md5hash.decode():
                sock.sendall(str(i).encode())
                break
        sock.recv(len(b'"Good guess !\n"'))
        if "INSA{" in sock.recv(2048).decode():
            return True
        else:
            return False
        sock.close()

if __name__ == '__main__':
    p = ArgumentParser()
    p.add_argument('-c', '--config', default=Path('.mkctf.yml'), type=Path,
                   help=".mkctf.yml configuration file.")
    args = p.parse_args()

    with open(args.config) as f:
        conf = safe_load(f)

    host = conf['parameters']['exploit']['host']
    port = conf['parameters']['port']

    exit(0 if exploitable(host, port) else 1)
