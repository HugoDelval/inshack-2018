#!/usr/bin/env python3
# -!- encoding:utf8 -!-
# =============================================================================
#  IMPORTS
# =============================================================================
from struct import unpack
from base64 import b64decode
from pathlib import Path
from argparse import ArgumentParser
from scapy.all import rdpcap
from Crypto.Cipher import AES
# =============================================================================
#  CONFIGURATION
# =============================================================================
AES_KEY = 'd3Adb3Efc4Feb4Be'
# =============================================================================
#  FUNCTIONS
# =============================================================================
def decrypt(data):
    cipher = AES.new(AES_KEY, AES.MODE_ECB)
    return cipher.decrypt(data)

def decrypt_one(data):
    dsize = data[0:4]
    size = unpack('>I', dsize)[0]
    data = data[4:size+4]
    return size+4, decrypt(b64decode(data[4:-4]))

def parse_capture(capture_file):
    pcap = rdpcap(str(capture_file))
    sessions = pcap.sessions()
    packets = sessions['TCP 192.168.56.101:60182 > 192.168.56.1:42042']

    data = b''
    for pkt in packets:
        if pkt.haslayer('Raw'):
            raw = pkt.getlayer('Raw')
            data += raw.original

    k = 0
    tmp = Path('/tmp')
    while len(data) > 0:
        size, img_data = decrypt_one(data)

        filename = 'extracted-{}.png'.format(k)
        print("writing {}".format(filename))
        tmp.joinpath(filename).write_bytes(img_data)

        data = data[size:]
        k += 1

def main():
    p = ArgumentParser(add_help=True)
    p.add_argument('-c', '--capture', type=Path, help="")
    args = p.parse_args()

    if args.capture is not None and args.capture.is_file():
        parse_capture(args.capture)

    return 0
# =============================================================================
#  SCRIPT
# =============================================================================
if __name__ == '__main__':
    exit(main())
