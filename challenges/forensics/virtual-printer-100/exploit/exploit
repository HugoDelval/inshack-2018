#!/usr/bin/env python3
# -!- encoding:utf8 -!-
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#    file: exploit
#    date: 2017-09-27
#  author: paul.dautry
# purpose:
#   
# license:
#       GPLv3
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#===============================================================================
# IMPORTS
#===============================================================================
import sys
import base64
from subprocess import check_output
from PIL import Image
#===============================================================================
# GLOBALS / CONFIG
#===============================================================================
DEBUG = False
PNG_FILE = 'test.png'
HOST = '127.0.0.1'
PORT = 24042
# you must identify these values (50, 20, 64 and 8) through image observation use GIMP.
MAT_OE = 50
MAT_OD = 20
MAT_W = 64
MAT_H = 8 
# you must identify these values (255, 255, 204) through image observation use GIMP.
DOT_R = 255
DOT_G = 255
DOT_B = 204
#===============================================================================
# FUNCTIONS
#===============================================================================
def pdbg(msg):
    if DEBUG:
        print(msg)
#===============================================================================
# CLASSES
#===============================================================================
class Exploit(object):
    #---------------------------------------------------------------------------
    # __init__ 
    #---------------------------------------------------------------------------
    def __init__(self, png_file=None, host=None, port=None):
        super(Exploit, self).__init__()
        self.png_file = PNG_FILE if png_file is None else png_file
        self.host = HOST if host is None else host
        self.port = str(PORT) if port is None else port
        self.tmp_b64 = '/tmp/vps-exploit.b64.png'
        self.tmp_page = '/tmp/vps-exploit.png'
        self.print_url = 'http://{0}:{1}/print'.format(self.host, self.port)
        self.sn_url = 'http://{0}:{1}/serial-number'.format(self.host, self.port)
    #---------------------------------------------------------------------------
    # __print_png
    #---------------------------------------------------------------------------
    def __print_png(self):
        with open(self.png_file, 'rb') as i:
            with open(self.tmp_b64, 'wb') as o:
                o.write(base64.b64encode(i.read()))
        cmd = 'curl -X POST --form "f=@{0}" {1}'.format(self.tmp_b64, self.print_url)
        output = check_output(cmd, shell=True)
        with open(self.tmp_page, 'wb') as o:
            o.write(base64.b64decode(output))
    #---------------------------------------------------------------------------
    # __extract_data
    #---------------------------------------------------------------------------
    def __extract_data(self):
        img = Image.open(self.tmp_page)
        # you must identify these values (50, 20, 64 and 8) through image observation use GIMP.
        cimg = img.crop((MAT_OE, MAT_OE, MAT_OE+MAT_OD*MAT_W, MAT_OE+MAT_OD*MAT_H))
        cimg.save('/tmp/exploit.cropped.png')
        (w, h) = cimg.size
        pdbg(cimg.size)
        pixels = list(cimg.getdata())
        # 8 x 64 dot matrix fill it with one and zeros
        self.mat = [ [ 0 for c in range(0, MAT_W) ] for r in range(0, MAT_H) ] 
        for r in range(0, MAT_H):
            for c in range(0, MAT_W):
                (red, green, blue) = pixels[r * w * MAT_OD + c * MAT_OD ]
                if red == DOT_R and green == DOT_G and blue == DOT_B:
                    self.mat[r][c] = 1
        # print matrix
        for r in self.mat:
            pdbg(r)
    #---------------------------------------------------------------------------
    # __send_serial_number
    #---------------------------------------------------------------------------
    def __send_serial_number(self):
        ba = []
        # rebuild bytes
        for c in range(0, MAT_W):
            o = 0
            for r in range(0, MAT_H):
                o |= self.mat[r][c] << (7-r) 
            ba.append(o)
        data = bytes(ba)
        pdbg('extracted: {0}'.format(data))
        sn_dat = data.split(b'\n')[2]
        sn_b64 = base64.b64encode(sn_dat[4:])
        #Â post serial number and get a flag
        cmd = 'curl -X POST --data "sn={0}" {1}'.format(sn_b64.decode('utf-8'), self.sn_url)
        output = check_output(cmd, shell=True)
        flag = output.split(b': ')[-1]
        return flag
    #---------------------------------------------------------------------------
    # run
    #---------------------------------------------------------------------------
    def run(self):
        print('[exploit]> sending PNG file for printing...')
        self.__print_png()
        print('[exploit]> extracting data from dot matrix...')
        self.__extract_data()
        print('[exploit]> sending serial number...')
        flag = self.__send_serial_number()
        print('[exploit]> flag: {0}'.format(flag))
        return True
#===============================================================================
# SCRIPT
#===============================================================================
if __name__ == '__main__':
    expect_argc = 4
    if len(sys.argv) != expect_argc and len(sys.argv) != 1:
        print('usage: %s [<file.png> <host> <port>]' % sys.argv[0])
        exit(1)
    if len(sys.argv) == expect_argc:
        e = Exploit(sys.argv[1], sys.argv[2], sys.argv[3])
    else:
        e = Exploit()
    exit(0 if e.run() else 1)